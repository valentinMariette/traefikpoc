---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-ingress
  namespace: my-namespace
spec:
  entryPoints:
    - web
  routes:
    - match: "Host(`echo.staging.armis.tech`) && PathPrefix(`/oauth2`)"
      kind: Rule
      services:
        - name: oauth2-proxy
          namespace: my-namespace
          port: 4180
      middlewares:
        - name: oauth-errors
    - match: Host(`echo.staging.armis.tech`)
      kind: Rule
      # middlewares:
      #   - name: oauth-errors
      #   - name: oauth2-proxy
      services:
        - name: echo
          port: 8080
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: oauth-errors
spec:
  errors:
    status:
      - "401-403"
    service:
      name: oauth2-proxy
      port: 4180
    query: "/oauth2/sign_in"
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: oauth-headers
spec:
  headers:
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: oauth2-proxy
  namespace: my-namespace
spec:
  forwardAuth:
    address: http://oauth2-proxy.my-namespace.svc:4180/oauth2/auth
    trustForwardHeader: true
    authResponseHeaders:
      - X-Auth-Request-User
      - Set-Cookie
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: oauth2-proxy
  name: oauth2-proxy
  namespace: my-namespace
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 4180
    protocol: TCP
    targetPort: 4180
  selector:
    k8s-app: oauth2-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
  namespace: my-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: oauth2-proxy
  template:
    metadata:
      labels:
        k8s-app: oauth2-proxy
    spec:
      containers:
      - args:
        - --provider=oidc
        - --oidc-issuer-url=https://armis-identity.staging.armis.tech/realms/armis-clerks
        - --email-domain=*
        - --upstream=file:///dev/null
        - --http-address=0.0.0.0:4180
        - --pass-user-headers=true
        - --set-authorization-header=true
        - --set-xauthrequest=true
        - --reverse-proxy=true
        - --code-challenge-method=S256
        - --ssl-insecure-skip-verify=true
        - --ssl-upstream-insecure-skip-verify=true
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "traefik-apigateway"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: "ZpH0qdW9vKJWXh2jR6dOeduLUS65RHQ9"
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: somerandomstringasacookiesecret2
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0-amd64
        imagePullPolicy: Always
        name: oauth2-proxy
        ports:
        - containerPort: 4180
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo
  template:
    metadata:
      labels:
        app: echo
    spec:
      containers:
        - image: mendhak/http-https-echo:latest
          imagePullPolicy: IfNotPresent
          name: echo
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 500Mi
          ports:
            - containerPort: 8080
              name: proxy
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: echo
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
  selector:
    app: echo
